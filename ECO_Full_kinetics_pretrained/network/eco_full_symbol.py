#! /usr/bin/env python
# coding : utf-8

"""ECO network, implemented in Gluon"""

import os
import mxnet as mx
from mxnet.context import gpu
from mxnet import base
import numpy as np
import logging
logging.getLogger().setLevel(logging.INFO)


def Eco(num_classes=63):
    """
    Construct ECO_FULL network in mx.symbol.

    :return:
    eco_net_symbol: Symbol network

    """
    data = mx.symbol.Variable(name='data')
    conv1_7x7_s2 = mx.symbol.Convolution(name='conv1_7x7_s2', data=data , num_filter=64, pad=(3, 3), kernel=(7,7), stride=(2,2), no_bias=False)
    conv1_7x7_s2_bn = mx.symbol.BatchNorm(name='conv1_7x7_s2_bn', data=conv1_7x7_s2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    conv1_relu_7x7_inp = mx.symbol.Activation(name='conv1_relu_7x7_inp', data=conv1_7x7_s2_bn , act_type='relu')
    pool1_3x3_s2 = mx.symbol.Pooling(name='pool1_3x3_s2', data=conv1_relu_7x7_inp , pooling_convention='full', pad=(0, 0), kernel=(3, 3), stride=(2, 2), pool_type='max')
    conv2_3x3_reduce = mx.symbol.Convolution(name='conv2_3x3_reduce', data=pool1_3x3_s2 , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    conv2_3x3_reduce_bn = mx.symbol.BatchNorm(name='conv2_3x3_reduce_bn', data=conv2_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    conv2_relu_3x3_reduce_inp = mx.symbol.Activation(name='conv2_relu_3x3_reduce_inp', data=conv2_3x3_reduce_bn , act_type='relu')
    conv2_3x3 = mx.symbol.Convolution(name='conv2_3x3', data=conv2_relu_3x3_reduce_inp , num_filter=192, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    conv2_3x3_bn = mx.symbol.BatchNorm(name='conv2_3x3_bn', data=conv2_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    conv2_relu_3x3_inp = mx.symbol.Activation(name='conv2_relu_3x3_inp', data=conv2_3x3_bn , act_type='relu')
    pool2_3x3_s2 = mx.symbol.Pooling(name='pool2_3x3_s2', data=conv2_relu_3x3_inp , pooling_convention='full', pad=(0, 0), kernel=(3, 3), stride=(2, 2), pool_type='max')
    inception_3a_1x1 = mx.symbol.Convolution(name='inception_3a_1x1', data=pool2_3x3_s2 , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3a_1x1_bn = mx.symbol.BatchNorm(name='inception_3a_1x1_bn', data=inception_3a_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_1x1_inp = mx.symbol.Activation(name='inception_3a_relu_1x1_inp', data=inception_3a_1x1_bn , act_type='relu')
    inception_3a_3x3_reduce = mx.symbol.Convolution(name='inception_3a_3x3_reduce', data=pool2_3x3_s2 , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3a_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_3a_3x3_reduce_bn', data=inception_3a_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_3a_relu_3x3_reduce_inp', data=inception_3a_3x3_reduce_bn , act_type='relu')
    inception_3a_3x3 = mx.symbol.Convolution(name='inception_3a_3x3', data=inception_3a_relu_3x3_reduce_inp , num_filter=64, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3a_3x3_bn = mx.symbol.BatchNorm(name='inception_3a_3x3_bn', data=inception_3a_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_3x3_inp = mx.symbol.Activation(name='inception_3a_relu_3x3_inp', data=inception_3a_3x3_bn , act_type='relu')
    inception_3a_double_3x3_reduce = mx.symbol.Convolution(name='inception_3a_double_3x3_reduce', data=pool2_3x3_s2 , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3a_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_3a_double_3x3_reduce_bn', data=inception_3a_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_3a_relu_double_3x3_reduce_inp', data=inception_3a_double_3x3_reduce_bn , act_type='relu')
    inception_3a_double_3x3_1 = mx.symbol.Convolution(name='inception_3a_double_3x3_1', data=inception_3a_relu_double_3x3_reduce_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3a_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_3a_double_3x3_1_bn', data=inception_3a_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_3a_relu_double_3x3_1_inp', data=inception_3a_double_3x3_1_bn , act_type='relu')
    inception_3a_double_3x3_2 = mx.symbol.Convolution(name='inception_3a_double_3x3_2', data=inception_3a_relu_double_3x3_1_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3a_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_3a_double_3x3_2_bn', data=inception_3a_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_3a_relu_double_3x3_2_inp', data=inception_3a_double_3x3_2_bn , act_type='relu')
    inception_3a_pool = mx.symbol.Pooling(name='inception_3a_pool', data=pool2_3x3_s2 , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_3a_pool_proj = mx.symbol.Convolution(name='inception_3a_pool_proj', data=inception_3a_pool , num_filter=32, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3a_pool_proj_bn = mx.symbol.BatchNorm(name='inception_3a_pool_proj_bn', data=inception_3a_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3a_relu_pool_proj_inp = mx.symbol.Activation(name='inception_3a_relu_pool_proj_inp', data=inception_3a_pool_proj_bn , act_type='relu')
    inception_3a_output = mx.symbol.Concat(name='inception_3a_output', *[inception_3a_relu_1x1_inp,inception_3a_relu_3x3_inp,inception_3a_relu_double_3x3_2_inp,inception_3a_relu_pool_proj_inp] )
    inception_3b_1x1 = mx.symbol.Convolution(name='inception_3b_1x1', data=inception_3a_output , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3b_1x1_bn = mx.symbol.BatchNorm(name='inception_3b_1x1_bn', data=inception_3b_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_1x1_inp = mx.symbol.Activation(name='inception_3b_relu_1x1_inp', data=inception_3b_1x1_bn , act_type='relu')
    inception_3b_3x3_reduce = mx.symbol.Convolution(name='inception_3b_3x3_reduce', data=inception_3a_output , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3b_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_3b_3x3_reduce_bn', data=inception_3b_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_3b_relu_3x3_reduce_inp', data=inception_3b_3x3_reduce_bn , act_type='relu')
    inception_3b_3x3 = mx.symbol.Convolution(name='inception_3b_3x3', data=inception_3b_relu_3x3_reduce_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3b_3x3_bn = mx.symbol.BatchNorm(name='inception_3b_3x3_bn', data=inception_3b_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_3x3_inp = mx.symbol.Activation(name='inception_3b_relu_3x3_inp', data=inception_3b_3x3_bn , act_type='relu')
    inception_3b_double_3x3_reduce = mx.symbol.Convolution(name='inception_3b_double_3x3_reduce', data=inception_3a_output , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3b_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_3b_double_3x3_reduce_bn', data=inception_3b_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_3b_relu_double_3x3_reduce_inp', data=inception_3b_double_3x3_reduce_bn , act_type='relu')
    inception_3b_double_3x3_1 = mx.symbol.Convolution(name='inception_3b_double_3x3_1', data=inception_3b_relu_double_3x3_reduce_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3b_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_3b_double_3x3_1_bn', data=inception_3b_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_3b_relu_double_3x3_1_inp', data=inception_3b_double_3x3_1_bn , act_type='relu')
    inception_3b_double_3x3_2 = mx.symbol.Convolution(name='inception_3b_double_3x3_2', data=inception_3b_relu_double_3x3_1_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3b_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_3b_double_3x3_2_bn', data=inception_3b_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_3b_relu_double_3x3_2_inp', data=inception_3b_double_3x3_2_bn , act_type='relu')
    inception_3b_pool = mx.symbol.Pooling(name='inception_3b_pool', data=inception_3a_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_3b_pool_proj = mx.symbol.Convolution(name='inception_3b_pool_proj', data=inception_3b_pool , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3b_pool_proj_bn = mx.symbol.BatchNorm(name='inception_3b_pool_proj_bn', data=inception_3b_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3b_relu_pool_proj_inp = mx.symbol.Activation(name='inception_3b_relu_pool_proj_inp', data=inception_3b_pool_proj_bn , act_type='relu')
    inception_3b_output = mx.symbol.Concat(name='inception_3b_output', *[inception_3b_relu_1x1_inp,inception_3b_relu_3x3_inp,inception_3b_relu_double_3x3_2_inp,inception_3b_relu_pool_proj_inp] )
    inception_3c_3x3_reduce = mx.symbol.Convolution(name='inception_3c_3x3_reduce', data=inception_3b_output , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3c_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_3c_3x3_reduce_bn', data=inception_3c_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3c_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_3c_relu_3x3_reduce_inp', data=inception_3c_3x3_reduce_bn , act_type='relu')
    inception_3c_3x3 = mx.symbol.Convolution(name='inception_3c_3x3', data=inception_3c_relu_3x3_reduce_inp , num_filter=160, pad=(1, 1), kernel=(3,3), stride=(2,2), no_bias=False)
    inception_3c_3x3_bn = mx.symbol.BatchNorm(name='inception_3c_3x3_bn', data=inception_3c_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3c_relu_3x3_inp = mx.symbol.Activation(name='inception_3c_relu_3x3_inp', data=inception_3c_3x3_bn , act_type='relu')
    inception_3c_double_3x3_reduce = mx.symbol.Convolution(name='inception_3c_double_3x3_reduce', data=inception_3b_output , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_3c_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_3c_double_3x3_reduce_bn', data=inception_3c_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3c_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_3c_relu_double_3x3_reduce_inp', data=inception_3c_double_3x3_reduce_bn , act_type='relu')
    inception_3c_double_3x3_1 = mx.symbol.Convolution(name='inception_3c_double_3x3_1', data=inception_3c_relu_double_3x3_reduce_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_3c_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_3c_double_3x3_1_bn', data=inception_3c_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3c_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_3c_relu_double_3x3_1_inp', data=inception_3c_double_3x3_1_bn , act_type='relu')
    r2Dto3D = mx.symbol.Reshape(name='r2Dto3D', data=inception_3c_relu_double_3x3_1_inp , shape=(-1,16,96,28,28))
    Transpose1 = mx.symbol.transpose(name='Transpose1', data=r2Dto3D , axes=(0,2,1,3,4))
    res3a_2n = mx.symbol.Convolution(name='res3a_2n', data=Transpose1 , num_filter=128, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res3a_bn = mx.symbol.BatchNorm(name='res3a_bn', data=res3a_2n , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res3a_relu = mx.symbol.Activation(name='res3a_relu', data=res3a_bn , act_type='relu')
    res3b_1 = mx.symbol.Convolution(name='res3b_1', data=res3a_relu , num_filter=128, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res3b_1_bn = mx.symbol.BatchNorm(name='res3b_1_bn', data=res3b_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res3b_1_relu = mx.symbol.Activation(name='res3b_1_relu', data=res3b_1_bn , act_type='relu')
    res3b_2 = mx.symbol.Convolution(name='res3b_2', data=res3b_1_relu , num_filter=128, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res3b = mx.symbol.broadcast_add(name='res3b', *[res3b_2,res3a_2n] )
    res3b_bn = mx.symbol.BatchNorm(name='res3b_bn', data=res3b , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res3b_relu = mx.symbol.Activation(name='res3b_relu', data=res3b_bn , act_type='relu')
    res4a_1 = mx.symbol.Convolution(name='res4a_1', data=res3b_relu , num_filter=256, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(2, 2, 2), no_bias=False)
    res4a_1_bn = mx.symbol.BatchNorm(name='res4a_1_bn', data=res4a_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res4a_1_relu = mx.symbol.Activation(name='res4a_1_relu', data=res4a_1_bn , act_type='relu')
    res4a_2 = mx.symbol.Convolution(name='res4a_2', data=res4a_1_relu , num_filter=256, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res4a_down = mx.symbol.Convolution(name='res4a_down', data=res3b_relu , num_filter=256, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(2, 2, 2), no_bias=False)
    res4a = mx.symbol.broadcast_add(name='res4a', *[res4a_2,res4a_down] )
    res4a_bn = mx.symbol.BatchNorm(name='res4a_bn', data=res4a , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res4a_relu = mx.symbol.Activation(name='res4a_relu', data=res4a_bn , act_type='relu')
    res4b_1 = mx.symbol.Convolution(name='res4b_1', data=res4a_relu , num_filter=256, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res4b_1_bn = mx.symbol.BatchNorm(name='res4b_1_bn', data=res4b_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res4b_1_relu = mx.symbol.Activation(name='res4b_1_relu', data=res4b_1_bn , act_type='relu')
    res4b_2 = mx.symbol.Convolution(name='res4b_2', data=res4b_1_relu , num_filter=256, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res4b = mx.symbol.broadcast_add(name='res4b', *[res4b_2,res4a] )
    res4b_bn = mx.symbol.BatchNorm(name='res4b_bn', data=res4b , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res4b_relu = mx.symbol.Activation(name='res4b_relu', data=res4b_bn , act_type='relu')
    res5a_1 = mx.symbol.Convolution(name='res5a_1', data=res4b_relu , num_filter=512, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(2, 2, 2), no_bias=False)
    res5a_1_bn = mx.symbol.BatchNorm(name='res5a_1_bn', data=res5a_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res5a_1_relu = mx.symbol.Activation(name='res5a_1_relu', data=res5a_1_bn , act_type='relu')
    res5a_2 = mx.symbol.Convolution(name='res5a_2', data=res5a_1_relu , num_filter=512, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res5a_down = mx.symbol.Convolution(name='res5a_down', data=res4b_relu , num_filter=512, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(2, 2, 2), no_bias=False)
    res5a = mx.symbol.broadcast_add(name='res5a', *[res5a_2,res5a_down] )
    res5a_bn = mx.symbol.BatchNorm(name='res5a_bn', data=res5a , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res5a_relu = mx.symbol.Activation(name='res5a_relu', data=res5a_bn , act_type='relu')
    res5b_1 = mx.symbol.Convolution(name='res5b_1', data=res5a_relu , num_filter=512, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res5b_1_bn = mx.symbol.BatchNorm(name='res5b_1_bn', data=res5b_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res5b_1_relu = mx.symbol.Activation(name='res5b_1_relu', data=res5b_1_bn , act_type='relu')
    res5b_2 = mx.symbol.Convolution(name='res5b_2', data=res5b_1_relu , num_filter=512, pad=(1, 1, 1), kernel=(3, 3, 3), stride=(1, 1, 1), no_bias=False)
    res5b = mx.symbol.broadcast_add(name='res5b', *[res5b_2,res5a] )
    res5b_bn = mx.symbol.BatchNorm(name='res5b_bn', data=res5b , use_global_stats=False, fix_gamma=False, eps=0.000100)
    res5b_relu = mx.symbol.Activation(name='res5b_relu', data=res5b_bn , act_type='relu')
    inception_3c_double_3x3_2 = mx.symbol.Convolution(name='inception_3c_double_3x3_2', data=inception_3c_relu_double_3x3_1_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(2,2), no_bias=False)
    inception_3c_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_3c_double_3x3_2_bn', data=inception_3c_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_3c_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_3c_relu_double_3x3_2_inp', data=inception_3c_double_3x3_2_bn , act_type='relu')
    inception_3c_pool = mx.symbol.Pooling(name='inception_3c_pool', data=inception_3b_output , pooling_convention='full', pad=(0, 0), kernel=(3, 3), stride=(2, 2), pool_type='max')
    inception_3c_output = mx.symbol.Concat(name='inception_3c_output', *[inception_3c_relu_3x3_inp,inception_3c_relu_double_3x3_2_inp,inception_3c_pool] )
    inception_4a_1x1 = mx.symbol.Convolution(name='inception_4a_1x1', data=inception_3c_output , num_filter=224, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4a_1x1_bn = mx.symbol.BatchNorm(name='inception_4a_1x1_bn', data=inception_4a_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_1x1_inp = mx.symbol.Activation(name='inception_4a_relu_1x1_inp', data=inception_4a_1x1_bn , act_type='relu')
    inception_4a_3x3_reduce = mx.symbol.Convolution(name='inception_4a_3x3_reduce', data=inception_3c_output , num_filter=64, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4a_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4a_3x3_reduce_bn', data=inception_4a_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_4a_relu_3x3_reduce_inp', data=inception_4a_3x3_reduce_bn , act_type='relu')
    inception_4a_3x3 = mx.symbol.Convolution(name='inception_4a_3x3', data=inception_4a_relu_3x3_reduce_inp , num_filter=96, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4a_3x3_bn = mx.symbol.BatchNorm(name='inception_4a_3x3_bn', data=inception_4a_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_3x3_inp = mx.symbol.Activation(name='inception_4a_relu_3x3_inp', data=inception_4a_3x3_bn , act_type='relu')
    inception_4a_double_3x3_reduce = mx.symbol.Convolution(name='inception_4a_double_3x3_reduce', data=inception_3c_output , num_filter=96, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4a_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4a_double_3x3_reduce_bn', data=inception_4a_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_4a_relu_double_3x3_reduce_inp', data=inception_4a_double_3x3_reduce_bn , act_type='relu')
    inception_4a_double_3x3_1 = mx.symbol.Convolution(name='inception_4a_double_3x3_1', data=inception_4a_relu_double_3x3_reduce_inp , num_filter=128, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4a_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_4a_double_3x3_1_bn', data=inception_4a_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_4a_relu_double_3x3_1_inp', data=inception_4a_double_3x3_1_bn , act_type='relu')
    inception_4a_double_3x3_2 = mx.symbol.Convolution(name='inception_4a_double_3x3_2', data=inception_4a_relu_double_3x3_1_inp , num_filter=128, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4a_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_4a_double_3x3_2_bn', data=inception_4a_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_4a_relu_double_3x3_2_inp', data=inception_4a_double_3x3_2_bn , act_type='relu')
    inception_4a_pool = mx.symbol.Pooling(name='inception_4a_pool', data=inception_3c_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_4a_pool_proj = mx.symbol.Convolution(name='inception_4a_pool_proj', data=inception_4a_pool , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4a_pool_proj_bn = mx.symbol.BatchNorm(name='inception_4a_pool_proj_bn', data=inception_4a_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4a_relu_pool_proj_inp = mx.symbol.Activation(name='inception_4a_relu_pool_proj_inp', data=inception_4a_pool_proj_bn , act_type='relu')
    inception_4a_output = mx.symbol.Concat(name='inception_4a_output', *[inception_4a_relu_1x1_inp,inception_4a_relu_3x3_inp,inception_4a_relu_double_3x3_2_inp,inception_4a_relu_pool_proj_inp] )
    inception_4b_1x1 = mx.symbol.Convolution(name='inception_4b_1x1', data=inception_4a_output , num_filter=192, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4b_1x1_bn = mx.symbol.BatchNorm(name='inception_4b_1x1_bn', data=inception_4b_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_1x1_inp = mx.symbol.Activation(name='inception_4b_relu_1x1_inp', data=inception_4b_1x1_bn , act_type='relu')
    inception_4b_3x3_reduce = mx.symbol.Convolution(name='inception_4b_3x3_reduce', data=inception_4a_output , num_filter=96, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4b_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4b_3x3_reduce_bn', data=inception_4b_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_4b_relu_3x3_reduce_inp', data=inception_4b_3x3_reduce_bn , act_type='relu')
    inception_4b_3x3 = mx.symbol.Convolution(name='inception_4b_3x3', data=inception_4b_relu_3x3_reduce_inp , num_filter=128, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4b_3x3_bn = mx.symbol.BatchNorm(name='inception_4b_3x3_bn', data=inception_4b_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_3x3_inp = mx.symbol.Activation(name='inception_4b_relu_3x3_inp', data=inception_4b_3x3_bn , act_type='relu')
    inception_4b_double_3x3_reduce = mx.symbol.Convolution(name='inception_4b_double_3x3_reduce', data=inception_4a_output , num_filter=96, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4b_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4b_double_3x3_reduce_bn', data=inception_4b_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_4b_relu_double_3x3_reduce_inp', data=inception_4b_double_3x3_reduce_bn , act_type='relu')
    inception_4b_double_3x3_1 = mx.symbol.Convolution(name='inception_4b_double_3x3_1', data=inception_4b_relu_double_3x3_reduce_inp , num_filter=128, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4b_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_4b_double_3x3_1_bn', data=inception_4b_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_4b_relu_double_3x3_1_inp', data=inception_4b_double_3x3_1_bn , act_type='relu')
    inception_4b_double_3x3_2 = mx.symbol.Convolution(name='inception_4b_double_3x3_2', data=inception_4b_relu_double_3x3_1_inp , num_filter=128, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4b_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_4b_double_3x3_2_bn', data=inception_4b_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_4b_relu_double_3x3_2_inp', data=inception_4b_double_3x3_2_bn , act_type='relu')
    inception_4b_pool = mx.symbol.Pooling(name='inception_4b_pool', data=inception_4a_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_4b_pool_proj = mx.symbol.Convolution(name='inception_4b_pool_proj', data=inception_4b_pool , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4b_pool_proj_bn = mx.symbol.BatchNorm(name='inception_4b_pool_proj_bn', data=inception_4b_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4b_relu_pool_proj_inp = mx.symbol.Activation(name='inception_4b_relu_pool_proj_inp', data=inception_4b_pool_proj_bn , act_type='relu')
    inception_4b_output = mx.symbol.Concat(name='inception_4b_output', *[inception_4b_relu_1x1_inp,inception_4b_relu_3x3_inp,inception_4b_relu_double_3x3_2_inp,inception_4b_relu_pool_proj_inp] )
    inception_4c_1x1 = mx.symbol.Convolution(name='inception_4c_1x1', data=inception_4b_output , num_filter=160, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4c_1x1_bn = mx.symbol.BatchNorm(name='inception_4c_1x1_bn', data=inception_4c_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_1x1_inp = mx.symbol.Activation(name='inception_4c_relu_1x1_inp', data=inception_4c_1x1_bn , act_type='relu')
    inception_4c_3x3_reduce = mx.symbol.Convolution(name='inception_4c_3x3_reduce', data=inception_4b_output , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4c_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4c_3x3_reduce_bn', data=inception_4c_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_4c_relu_3x3_reduce_inp', data=inception_4c_3x3_reduce_bn , act_type='relu')
    inception_4c_3x3 = mx.symbol.Convolution(name='inception_4c_3x3', data=inception_4c_relu_3x3_reduce_inp , num_filter=160, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4c_3x3_bn = mx.symbol.BatchNorm(name='inception_4c_3x3_bn', data=inception_4c_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_3x3_inp = mx.symbol.Activation(name='inception_4c_relu_3x3_inp', data=inception_4c_3x3_bn , act_type='relu')
    inception_4c_double_3x3_reduce = mx.symbol.Convolution(name='inception_4c_double_3x3_reduce', data=inception_4b_output , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4c_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4c_double_3x3_reduce_bn', data=inception_4c_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_4c_relu_double_3x3_reduce_inp', data=inception_4c_double_3x3_reduce_bn , act_type='relu')
    inception_4c_double_3x3_1 = mx.symbol.Convolution(name='inception_4c_double_3x3_1', data=inception_4c_relu_double_3x3_reduce_inp , num_filter=160, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4c_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_4c_double_3x3_1_bn', data=inception_4c_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_4c_relu_double_3x3_1_inp', data=inception_4c_double_3x3_1_bn , act_type='relu')
    inception_4c_double_3x3_2 = mx.symbol.Convolution(name='inception_4c_double_3x3_2', data=inception_4c_relu_double_3x3_1_inp , num_filter=160, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4c_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_4c_double_3x3_2_bn', data=inception_4c_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_4c_relu_double_3x3_2_inp', data=inception_4c_double_3x3_2_bn , act_type='relu')
    inception_4c_pool = mx.symbol.Pooling(name='inception_4c_pool', data=inception_4b_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_4c_pool_proj = mx.symbol.Convolution(name='inception_4c_pool_proj', data=inception_4c_pool , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4c_pool_proj_bn = mx.symbol.BatchNorm(name='inception_4c_pool_proj_bn', data=inception_4c_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4c_relu_pool_proj_inp = mx.symbol.Activation(name='inception_4c_relu_pool_proj_inp', data=inception_4c_pool_proj_bn , act_type='relu')
    inception_4c_output = mx.symbol.Concat(name='inception_4c_output', *[inception_4c_relu_1x1_inp,inception_4c_relu_3x3_inp,inception_4c_relu_double_3x3_2_inp,inception_4c_relu_pool_proj_inp] )
    inception_4d_1x1 = mx.symbol.Convolution(name='inception_4d_1x1', data=inception_4c_output , num_filter=96, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4d_1x1_bn = mx.symbol.BatchNorm(name='inception_4d_1x1_bn', data=inception_4d_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_1x1_inp = mx.symbol.Activation(name='inception_4d_relu_1x1_inp', data=inception_4d_1x1_bn , act_type='relu')
    inception_4d_3x3_reduce = mx.symbol.Convolution(name='inception_4d_3x3_reduce', data=inception_4c_output , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4d_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4d_3x3_reduce_bn', data=inception_4d_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_4d_relu_3x3_reduce_inp', data=inception_4d_3x3_reduce_bn , act_type='relu')
    inception_4d_3x3 = mx.symbol.Convolution(name='inception_4d_3x3', data=inception_4d_relu_3x3_reduce_inp , num_filter=192, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4d_3x3_bn = mx.symbol.BatchNorm(name='inception_4d_3x3_bn', data=inception_4d_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_3x3_inp = mx.symbol.Activation(name='inception_4d_relu_3x3_inp', data=inception_4d_3x3_bn , act_type='relu')
    inception_4d_double_3x3_reduce = mx.symbol.Convolution(name='inception_4d_double_3x3_reduce', data=inception_4c_output , num_filter=160, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4d_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4d_double_3x3_reduce_bn', data=inception_4d_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_4d_relu_double_3x3_reduce_inp', data=inception_4d_double_3x3_reduce_bn , act_type='relu')
    inception_4d_double_3x3_1 = mx.symbol.Convolution(name='inception_4d_double_3x3_1', data=inception_4d_relu_double_3x3_reduce_inp , num_filter=192, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4d_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_4d_double_3x3_1_bn', data=inception_4d_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_4d_relu_double_3x3_1_inp', data=inception_4d_double_3x3_1_bn , act_type='relu')
    inception_4d_double_3x3_2 = mx.symbol.Convolution(name='inception_4d_double_3x3_2', data=inception_4d_relu_double_3x3_1_inp , num_filter=192, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4d_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_4d_double_3x3_2_bn', data=inception_4d_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_4d_relu_double_3x3_2_inp', data=inception_4d_double_3x3_2_bn , act_type='relu')
    inception_4d_pool = mx.symbol.Pooling(name='inception_4d_pool', data=inception_4c_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_4d_pool_proj = mx.symbol.Convolution(name='inception_4d_pool_proj', data=inception_4d_pool , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4d_pool_proj_bn = mx.symbol.BatchNorm(name='inception_4d_pool_proj_bn', data=inception_4d_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4d_relu_pool_proj_inp = mx.symbol.Activation(name='inception_4d_relu_pool_proj_inp', data=inception_4d_pool_proj_bn , act_type='relu')
    inception_4d_output = mx.symbol.Concat(name='inception_4d_output', *[inception_4d_relu_1x1_inp,inception_4d_relu_3x3_inp,inception_4d_relu_double_3x3_2_inp,inception_4d_relu_pool_proj_inp] )
    inception_4e_3x3_reduce = mx.symbol.Convolution(name='inception_4e_3x3_reduce', data=inception_4d_output , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4e_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4e_3x3_reduce_bn', data=inception_4e_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4e_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_4e_relu_3x3_reduce_inp', data=inception_4e_3x3_reduce_bn , act_type='relu')
    inception_4e_3x3 = mx.symbol.Convolution(name='inception_4e_3x3', data=inception_4e_relu_3x3_reduce_inp , num_filter=192, pad=(1, 1), kernel=(3,3), stride=(2,2), no_bias=False)
    inception_4e_3x3_bn = mx.symbol.BatchNorm(name='inception_4e_3x3_bn', data=inception_4e_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4e_relu_3x3_inp = mx.symbol.Activation(name='inception_4e_relu_3x3_inp', data=inception_4e_3x3_bn , act_type='relu')
    inception_4e_double_3x3_reduce = mx.symbol.Convolution(name='inception_4e_double_3x3_reduce', data=inception_4d_output , num_filter=192, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_4e_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_4e_double_3x3_reduce_bn', data=inception_4e_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4e_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_4e_relu_double_3x3_reduce_inp', data=inception_4e_double_3x3_reduce_bn , act_type='relu')
    inception_4e_double_3x3_1 = mx.symbol.Convolution(name='inception_4e_double_3x3_1', data=inception_4e_relu_double_3x3_reduce_inp , num_filter=256, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_4e_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_4e_double_3x3_1_bn', data=inception_4e_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4e_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_4e_relu_double_3x3_1_inp', data=inception_4e_double_3x3_1_bn , act_type='relu')
    inception_4e_double_3x3_2 = mx.symbol.Convolution(name='inception_4e_double_3x3_2', data=inception_4e_relu_double_3x3_1_inp , num_filter=256, pad=(1, 1), kernel=(3,3), stride=(2,2), no_bias=False)
    inception_4e_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_4e_double_3x3_2_bn', data=inception_4e_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_4e_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_4e_relu_double_3x3_2_inp', data=inception_4e_double_3x3_2_bn , act_type='relu')
    inception_4e_pool = mx.symbol.Pooling(name='inception_4e_pool', data=inception_4d_output , pooling_convention='full', pad=(0, 0), kernel=(3, 3), stride=(2, 2), pool_type='max')
    inception_4e_output = mx.symbol.Concat(name='inception_4e_output', *[inception_4e_relu_3x3_inp,inception_4e_relu_double_3x3_2_inp,inception_4e_pool] )
    inception_5a_1x1 = mx.symbol.Convolution(name='inception_5a_1x1', data=inception_4e_output , num_filter=352, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5a_1x1_bn = mx.symbol.BatchNorm(name='inception_5a_1x1_bn', data=inception_5a_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_1x1_inp = mx.symbol.Activation(name='inception_5a_relu_1x1_inp', data=inception_5a_1x1_bn , act_type='relu')
    inception_5a_3x3_reduce = mx.symbol.Convolution(name='inception_5a_3x3_reduce', data=inception_4e_output , num_filter=192, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5a_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_5a_3x3_reduce_bn', data=inception_5a_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_5a_relu_3x3_reduce_inp', data=inception_5a_3x3_reduce_bn , act_type='relu')
    inception_5a_3x3 = mx.symbol.Convolution(name='inception_5a_3x3', data=inception_5a_relu_3x3_reduce_inp , num_filter=320, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_5a_3x3_bn = mx.symbol.BatchNorm(name='inception_5a_3x3_bn', data=inception_5a_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_3x3_inp = mx.symbol.Activation(name='inception_5a_relu_3x3_inp', data=inception_5a_3x3_bn , act_type='relu')
    inception_5a_double_3x3_reduce = mx.symbol.Convolution(name='inception_5a_double_3x3_reduce', data=inception_4e_output , num_filter=160, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5a_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_5a_double_3x3_reduce_bn', data=inception_5a_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_5a_relu_double_3x3_reduce_inp', data=inception_5a_double_3x3_reduce_bn , act_type='relu')
    inception_5a_double_3x3_1 = mx.symbol.Convolution(name='inception_5a_double_3x3_1', data=inception_5a_relu_double_3x3_reduce_inp , num_filter=224, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_5a_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_5a_double_3x3_1_bn', data=inception_5a_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_5a_relu_double_3x3_1_inp', data=inception_5a_double_3x3_1_bn , act_type='relu')
    inception_5a_double_3x3_2 = mx.symbol.Convolution(name='inception_5a_double_3x3_2', data=inception_5a_relu_double_3x3_1_inp , num_filter=224, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_5a_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_5a_double_3x3_2_bn', data=inception_5a_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_5a_relu_double_3x3_2_inp', data=inception_5a_double_3x3_2_bn , act_type='relu')
    inception_5a_pool = mx.symbol.Pooling(name='inception_5a_pool', data=inception_4e_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='avg')
    inception_5a_pool_proj = mx.symbol.Convolution(name='inception_5a_pool_proj', data=inception_5a_pool , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5a_pool_proj_bn = mx.symbol.BatchNorm(name='inception_5a_pool_proj_bn', data=inception_5a_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5a_relu_pool_proj_inp = mx.symbol.Activation(name='inception_5a_relu_pool_proj_inp', data=inception_5a_pool_proj_bn , act_type='relu')
    inception_5a_output = mx.symbol.Concat(name='inception_5a_output', *[inception_5a_relu_1x1_inp,inception_5a_relu_3x3_inp,inception_5a_relu_double_3x3_2_inp,inception_5a_relu_pool_proj_inp] )
    inception_5b_1x1 = mx.symbol.Convolution(name='inception_5b_1x1', data=inception_5a_output , num_filter=352, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5b_1x1_bn = mx.symbol.BatchNorm(name='inception_5b_1x1_bn', data=inception_5b_1x1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_1x1_inp = mx.symbol.Activation(name='inception_5b_relu_1x1_inp', data=inception_5b_1x1_bn , act_type='relu')
    inception_5b_3x3_reduce = mx.symbol.Convolution(name='inception_5b_3x3_reduce', data=inception_5a_output , num_filter=192, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5b_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_5b_3x3_reduce_bn', data=inception_5b_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_3x3_reduce_inp = mx.symbol.Activation(name='inception_5b_relu_3x3_reduce_inp', data=inception_5b_3x3_reduce_bn , act_type='relu')
    inception_5b_3x3 = mx.symbol.Convolution(name='inception_5b_3x3', data=inception_5b_relu_3x3_reduce_inp , num_filter=320, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_5b_3x3_bn = mx.symbol.BatchNorm(name='inception_5b_3x3_bn', data=inception_5b_3x3 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_3x3_inp = mx.symbol.Activation(name='inception_5b_relu_3x3_inp', data=inception_5b_3x3_bn , act_type='relu')
    inception_5b_double_3x3_reduce = mx.symbol.Convolution(name='inception_5b_double_3x3_reduce', data=inception_5a_output , num_filter=192, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5b_double_3x3_reduce_bn = mx.symbol.BatchNorm(name='inception_5b_double_3x3_reduce_bn', data=inception_5b_double_3x3_reduce , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_double_3x3_reduce_inp = mx.symbol.Activation(name='inception_5b_relu_double_3x3_reduce_inp', data=inception_5b_double_3x3_reduce_bn , act_type='relu')
    inception_5b_double_3x3_1 = mx.symbol.Convolution(name='inception_5b_double_3x3_1', data=inception_5b_relu_double_3x3_reduce_inp , num_filter=224, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_5b_double_3x3_1_bn = mx.symbol.BatchNorm(name='inception_5b_double_3x3_1_bn', data=inception_5b_double_3x3_1 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_double_3x3_1_inp = mx.symbol.Activation(name='inception_5b_relu_double_3x3_1_inp', data=inception_5b_double_3x3_1_bn , act_type='relu')
    inception_5b_double_3x3_2 = mx.symbol.Convolution(name='inception_5b_double_3x3_2', data=inception_5b_relu_double_3x3_1_inp , num_filter=224, pad=(1, 1), kernel=(3,3), stride=(1,1), no_bias=False)
    inception_5b_double_3x3_2_bn = mx.symbol.BatchNorm(name='inception_5b_double_3x3_2_bn', data=inception_5b_double_3x3_2 , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_double_3x3_2_inp = mx.symbol.Activation(name='inception_5b_relu_double_3x3_2_inp', data=inception_5b_double_3x3_2_bn , act_type='relu')
    inception_5b_pool = mx.symbol.Pooling(name='inception_5b_pool', data=inception_5a_output , pooling_convention='full', pad=(1, 1), kernel=(3, 3), stride=(1, 1), pool_type='max')
    inception_5b_pool_proj = mx.symbol.Convolution(name='inception_5b_pool_proj', data=inception_5b_pool , num_filter=128, pad=(0, 0), kernel=(1,1), stride=(1,1), no_bias=False)
    inception_5b_pool_proj_bn = mx.symbol.BatchNorm(name='inception_5b_pool_proj_bn', data=inception_5b_pool_proj , use_global_stats=False, fix_gamma=False, eps=0.000100)
    inception_5b_relu_pool_proj_inp = mx.symbol.Activation(name='inception_5b_relu_pool_proj_inp', data=inception_5b_pool_proj_bn , act_type='relu')
    inception_5b_output = mx.symbol.Concat(name='inception_5b_output', *[inception_5b_relu_1x1_inp,inception_5b_relu_3x3_inp,inception_5b_relu_double_3x3_2_inp,inception_5b_relu_pool_proj_inp] )
    global_pool2D = mx.symbol.Pooling(name='global_pool2D', data=inception_5b_output , pooling_convention='full', pad=(0, 0), kernel=(7, 7), stride=(1, 1), pool_type='avg')
    dropout2D = mx.symbol.Dropout(name='dropout2D', data=global_pool2D , p=0.600000)
    reshape_fc_st2 = mx.symbol.Reshape(name='reshape_fc_st2', data=dropout2D , shape=(-1,1,16,1024))
    segment_consensus_st2 = mx.symbol.Pooling(name='segment_consensus_st2', data=reshape_fc_st2 , pooling_convention='full', pad=(0, 0), kernel=(16, 1), stride=(1, 1), pool_type='avg')
    global_pool_reshape2D = mx.symbol.Reshape(name='global_pool_reshape2D', data=segment_consensus_st2, shape=(-1,1024))
    global_pool = mx.symbol.Pooling(name='global_pool', data=res5b_relu, pooling_convention='full', kernel=(4, 7, 7), stride=(1, 1, 1), pool_type='avg')
    global_pool_reshape = mx.symbol.Reshape(name='global_pool_reshape', data=global_pool, shape=(-1,512))
    dropout = mx.symbol.Dropout(name='dropout', data=global_pool_reshape, p=0.500000)
    gn02_concat = mx.symbol.Concat(name='gn02_concat', *[global_pool_reshape2D, dropout])
    flatten_0 = mx.symbol.Flatten(name='flatten_0', data=gn02_concat)
    fc8N = mx.symbol.FullyConnected(name='fc8N', data=flatten_0, num_hidden=num_classes, no_bias=False)
    return fc8N


def eco_full(json_file, param_file=None, ctx=mx.gpu()):
    r""" Build ECO_Full network from json file and params file.

    Parameters
    ----------
    json_file : str, symbol network defined in json file
    param_file : str, parameters file
    ctx : Context, default GPU
        The context in which to load the pretrained weights.
    """
    if param_file:
        # the pre_trained network with parameters doesn't have the last layer
        pre_trained = mx.gluon.SymbolBlock.imports(json_file, ['data'], param_file, ctx)
    else:
        # the pre_trained network without parameters
        pre_trained = mx.gluon.SymbolBlock.imports(json_file, ['data'], None, ctx)
        pre_trained.initialize(mx.init.Xavier(magnitude=2.24), ctx)
    # add the output layer
    return pre_trained


if __name__ == '__main__':
    pretrained_path = '/home/lijie/ECO_Full_kinetics_pretrained/pretrained_models/'
    # eco_net = eco_full(pretrained_path + 'kinetics_eco_full-symbol.json',
    #                    pretrained_path + 'kinetics_eco_full-0000.params', True)
    eco_net = eco_full(pretrained_path + 'eco_full_with_63_classes-symbol.json',
                       pretrained_path + 'eco_full_with_63_classes-0000.params', mx.gpu())
    inputs = mx.sym.var('data')
    out = eco_net(inputs)
    internals = out.get_internals()
    print(internals.list_outputs())

    x = mx.nd.random.normal(shape=(16, 3, 224, 224), ctx=mx.gpu())
    pred = eco_net(x)
    print("pred.shape : {0}, label : {1}".format(pred.shape, mx.nd.argmax(pred, axis=1).astype(np.int32)))

